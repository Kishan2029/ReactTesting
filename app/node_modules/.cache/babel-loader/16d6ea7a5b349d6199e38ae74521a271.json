{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\app1\\\\app\\\\src\\\\Component\\\\MemeGenerator.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"\",\n      allMemeImage: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      console.log(memes[0]);\n      this.setState({\n        allMemeImage: memes\n      });\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImage.length);\n    const randMemeImg = this.state.allMemeImage[randNum].url;\n    this.setState({\n      randomImg: randMemeImg\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"topText\",\n          placeholder: \"Top text\",\n          value: this.state.topText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"bottomText\",\n          placeholder: \"Bottom Text\",\n          value: this.state.bottomText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.randomImg,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"top-left\",\n          children: this.state.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"bottom-right\",\n          children: this.state.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["D:/React/app1/app/src/Component/MemeGenerator.js"],"names":["React","MemeGenerator","Component","constructor","state","topText","bottomText","randomImg","allMemeImage","handleChange","bind","handleSubmit","componentDidMount","fetch","then","response","json","memes","data","console","log","setState","event","name","value","target","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","render"],"mappings":"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","sourcesContent":["import React from \"react\"\r\n\r\nclass MemeGenerator extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            topText:\"\",\r\n            bottomText:\"\",\r\n            randomImg:\"\",\r\n            allMemeImage : []\r\n        }\r\n        this.handleChange=this.handleChange.bind(this)\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const{memes} = response.data\r\n                console.log(memes[0])\r\n                this.setState({ allMemeImage : memes})\r\n            })\r\n    }\r\n    handleChange(event){\r\n        const {name,value} = event.target\r\n        this.setState({ [name] : value})\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault()\r\n\r\n        const randNum= Math.floor(Math.random ()* this.state.allMemeImage.length)\r\n        const randMemeImg = this.state.allMemeImage[randNum].url\r\n        this.setState({ randomImg : randMemeImg})\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit ={this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                  \r\n                    <button>Generator</button>\r\n                </form>\r\n                <div class=\"container\">\r\n                    <img src={this.state.randomImg} alt=\"\"/>\r\n                    <div class=\"top-left\">{this.state.topText}</div>\r\n                    <div class=\"bottom-right\">{this.state.bottomText}</div>\r\n                    \r\n                    \r\n                </div>\r\n               \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}